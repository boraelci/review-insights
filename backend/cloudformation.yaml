Parameters:
  ArtifactsBucketName:
    Type: String
    Default: artifacts-412391315699

  ReviewsBucketName:
    Type: String
    Default: reviews-412391315699

  AnalysisTableName:
    Type: String
    Default: analysis-table

  FrontendLambdaName:
    Type: String
    Default: frontend-lambda

  GatherReviewsLambdaName:
    Type: String
    Default: gather-reviews-lambda

  ExtractInsightsLambdaName:
    Type: String
    Default: extract-insights-lambda

  GenerateReportLambdaName:
    Type: String
    Default: generate-report-lambda

  GatherReviewsQueueName:
    Type: String
    Default: gather-reviews-queue

  ExtractInsightsQueueName:
    Type: String
    Default: extract-insights-queue

  GenerateReportQueueName:
    Type: String
    Default: generate-report-queue

  FrontendUrl:
    Type: String
    Default: http://frontend-412391315699.s3-website-us-east-1.amazonaws.com

  GatherReviewsLambdaTimeout:
    Type: Number
    Default: 90

  ExtractInsightsLambdaTimeout:
    Type: Number
    Default: 45

Resources:
  ReviewsBucket:
    DependsOn: ExtractInsightsLambda
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      AccessControl: Private
      BucketName: !Ref ReviewsBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  FrontendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  FrontendLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          ENV: prod
          GATHER_REVIEWS_QUEUE_URL: !GetAtt GatherReviewsQueue.QueueUrl
          ANALYSIS_TABLE_NAME: !Ref AnalysisTableName
      FunctionName: !Ref FrontendLambdaName
      Handler: main.lambda_handler
      Runtime: python3.9
      Role: !GetAtt FrontendLambdaRole.Arn
      Architectures:
        - x86_64
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: !Sub ${FrontendLambdaName}/lambda_function.zip
      MemorySize: 128
      Timeout: 3
      EphemeralStorage:
        Size: 512

  HeadlessChromeLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: headless-chrome-layer
      Content:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: !Sub ${GatherReviewsLambdaName}/layer-headless_chrome.zip
      CompatibleRuntimes:
        - python3.8

  GatherReviewsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  GatherReviewsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          ENV: prod
          REVIEWS_BUCKET_NAME: !Ref ReviewsBucketName
          EXTRACT_INSIGHTS_QUEUE_URL: !GetAtt ExtractInsightsQueue.QueueUrl
      FunctionName: !Ref GatherReviewsLambdaName
      Handler: main.lambda_handler
      Runtime: python3.8
      Role: !GetAtt GatherReviewsLambdaRole.Arn
      Layers:
        - !Ref HeadlessChromeLayer
      Architectures:
        - x86_64
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: !Sub ${GatherReviewsLambdaName}/lambda_function.zip
      MemorySize: 1024
      Timeout: !Ref GatherReviewsLambdaTimeout
      EphemeralStorage:
        Size: 512

  ExtractInsightsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/ComprehendFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  ExtractInsightsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          ENV: prod
          REVIEWS_BUCKET_NAME: !Ref ReviewsBucketName
          GENERATE_REPORT_QUEUE_URL: !GetAtt GenerateReportQueue.QueueUrl
          ANALYSIS_TABLE_NAME: !Ref AnalysisTableName
      FunctionName: !Ref ExtractInsightsLambdaName
      Handler: main.lambda_handler
      Runtime: python3.9
      Role: !GetAtt ExtractInsightsLambdaRole.Arn
      Architectures:
        - x86_64
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: !Sub ${ExtractInsightsLambdaName}/lambda_function.zip
      MemorySize: 128
      Timeout: !Ref ExtractInsightsLambdaTimeout
      EphemeralStorage:
        Size: 512

  GenerateReportLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess

  GenerateReportLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          ENV: prod
          FRONTEND_URL: !Ref FrontendUrl
      FunctionName: !Ref GenerateReportLambdaName
      Handler: main.lambda_handler
      Runtime: python3.9
      Role: !GetAtt GenerateReportLambdaRole.Arn
      Layers:
        - arn:aws:lambda:us-east-1:336392948345:layer:AWSSDKPandas-Python39:5
      Architectures:
        - x86_64
      Code:
        S3Bucket: !Ref ArtifactsBucketName
        S3Key: !Sub ${GenerateReportLambdaName}/lambda_function.zip
      MemorySize: 128
      Timeout: 3
      EphemeralStorage:
        Size: 512

  GatherReviewsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref GatherReviewsQueueName
      VisibilityTimeout: !Ref GatherReviewsLambdaTimeout

  GatherReviewsLambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt GatherReviewsQueue.Arn
      FunctionName: !Ref GatherReviewsLambda

  ExtractInsightsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref ExtractInsightsQueueName
      VisibilityTimeout: !Ref ExtractInsightsLambdaTimeout

  ExtractInsightsLambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt ExtractInsightsQueue.Arn
      FunctionName: !Ref ExtractInsightsLambda

  GenerateReportQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref GenerateReportQueueName
      VisibilityTimeout: 3

  GenerateReportLambdaSQSTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt GenerateReportQueue.Arn
      FunctionName: !Ref GenerateReportLambda

  AnalysisTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: product_id
          AttributeType: S
        - AttributeName: insight_name
          AttributeType: S
      KeySchema:
        - AttributeName: product_id
          KeyType: HASH
        - AttributeName: insight_name
          KeyType: RANGE
      TableName: !Ref AnalysisTableName
      BillingMode: PAY_PER_REQUEST

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Review Insights
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayFrontendLambdaPermission:
    DependsOn: FrontendLambda
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref FrontendLambdaName
      Principal: apigateway.amazonaws.com

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProductOptionsMethod
      - ProductPostMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: prod

  ProductResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: products
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

  AnalysisResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: analyses
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId

  AnalysisByIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      PathPart: "{product_id}"
      ParentId: !Ref AnalysisResource

  ProductOptionsMethod:
    DependsOn:
      - ProductModel
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ProductResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters: {}
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          StatusCode: 200
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK

  ProductPostMethod:
    DependsOn:
      - ProductModel
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ProductResource
      HttpMethod: POST
      AuthorizationType: NONE
      OperationName: CreateProduct
      RequestParameters: {}
      RequestModels:
        application/json: "ProductModel"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          StatusCode: 200
      Integration:
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: |
            {
              "resourcePath": "$context.resourcePath",
              "httpMethod": "$context.httpMethod",
              "body": $input.json('$')
            }
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FrontendLambdaName}/invocations

  AnalysisOptionsMethod:
    DependsOn:
      - AnalysisModel
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref AnalysisByIdResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      RequestParameters: {}
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          StatusCode: 200
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK

  AnalysisGetMethod:
    DependsOn:
      - AnalysisModel
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref AnalysisByIdResource
      HttpMethod: GET
      AuthorizationType: NONE
      OperationName: GetAnalysis
      RequestParameters:
        "method.request.path.product_id": true
      RequestModels:
        "application/json": "AnalysisModel"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
          StatusCode: 200
      Integration:
        ContentHandling: CONVERT_TO_TEXT
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            StatusCode: 200
        PassthroughBehavior: NEVER
        RequestTemplates:
          application/json: |
            {
              "resourcePath": "$context.resourcePath",
              "httpMethod": "$context.httpMethod",
              "product_id": "$input.params('product_id')"
            }
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${FrontendLambdaName}/invocations

  SellerModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Name: SellerModel
      Schema: !Sub |
        {
          "type" : "object",
          "properties" : {
            "seller_id" : {
              "type" : "string"
            },
            "seller_name" : {
              "type" : "string"
            }
          }
        }
      ContentType: application/json

  ProductModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Name: ProductModel
      Schema: !Sub |
        {
          "type" : "object",
          "properties" : {
            "product_id" : {
              "type" : "string"
            },
            "product_link" : {
              "type" : "string"
            },
            "product_name" : {
              "type" : "string"
            },
            "product_category" : {
              "type" : "string"
            },
            "seller_id" : {
              "type" : "string"
            }
          }
        }
      ContentType: application/json

  AnalysisModel:
    Type: AWS::ApiGateway::Model
    DependsOn:
      - HistoricalDataModel
      - CategoricalDataModel
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Name: AnalysisModel
      Schema: !Sub |
        {
          "type" : "object",
          "properties" : {
            "analysis_id" : {
              "type" : "string"
            },
            "historical_data" : {
              "$ref" : "https://apigateway.amazonaws.com/restapis/${ApiGatewayRestApi}/models/HistoricalDataModel"
            },
            "categorical_data" : {
              "$ref" : "https://apigateway.amazonaws.com/restapis/${ApiGatewayRestApi}/models/CategoricalDataModel"
            }
          }
        }
      ContentType: application/json

  HistoricalDataModel:
    Type: AWS::ApiGateway::Model
    DependsOn:
      - MonthlyCountModel
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Name: HistoricalDataModel
      Schema: !Sub |
        {
          "type" : "object",
          "properties" : {
            "positive" : {
              "type" : "array",
              "items" : {
                "$ref" : "https://apigateway.amazonaws.com/restapis/${ApiGatewayRestApi}/models/MonthlyCountModel"
              }
            },
            "negative" : {
              "type" : "array",
              "items" : {
                "$ref" : "https://apigateway.amazonaws.com/restapis/${ApiGatewayRestApi}/models/MonthlyCountModel"
              }
            }
          }
        }
      ContentType: application/json

  CategoricalDataModel:
    Type: AWS::ApiGateway::Model
    DependsOn:
      - CategoricalCountModel
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Name: CategoricalDataModel
      Schema: !Sub |
        {
          "type": "object",
          "properties": {
            "positive": {
              "type": "array",
              "items": {
                "$ref": "https://apigateway.amazonaws.com/restapis/${ApiGatewayRestApi}/models/CategoricalCountModel"
              }
            },
            "negative": {
              "type": "array",
              "items": {
                "$ref": "https://apigateway.amazonaws.com/restapis/${ApiGatewayRestApi}/models/CategoricalCountModel"
              }
            }
          }
        }
      ContentType: application/json

  MonthlyCountModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Name: MonthlyCountModel
      Schema: !Sub |
        {
          "type": "object",
          "properties": {
            "month": {
              "type": "string"
            },
            "count": {
              "type": "string"
            }
          }
        }
      ContentType: application/json

  CategoricalCountModel:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Name: CategoricalCountModel
      Schema: !Sub |
        {
          "type": "object",
          "properties": {
            "category": {
              "type": "string"
            },
            "count": {
              "type": "string"
            }
          }
        }
      ContentType: application/json
